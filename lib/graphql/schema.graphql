"Root query\n    "
type Query {
  documents: DocumentsQuery
  fals: FALsQuery
}

type DocumentsQuery {
  certificates: CertificatesQuery
}

type CertificatesQuery {
  all: [CertificateType]
}

type CertificateType {
  id: ID!
  date: Date!
  attachment: String
  no: String!
  operationBasis: String!
  unitName: String!
  serviceUnitName: String!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type FALsQuery {
  categories: FALCategoriesQuery
  types: FALTypesQuery
  fals: FALModelsQuery
}

type FALCategoriesQuery {
  all: [FALCategoryType]
}

type FALCategoryType {
  id: ID!
  name: FalsFALCategoryNameChoices!
  faltypeSet: [FALTypeType!]!
}

"""An enumeration."""
enum FalsFALCategoryNameChoices {
  """Дизель"""
  DIESEL

  """Бензин"""
  PETROL

  """Мастило"""
  OIL
}

type FALTypeType {
  id: ID!
  name: String!
  category: FALCategoryType!
  falSet: [FALModelType!]!
}

type FALModelType {
  id: ID!
  falType: FALTypeType!
  amount: Float!
  density: Float
  volume: Float
  documentId: Int!
}

type FALTypesQuery {
  all: [FALTypeType]
}

type FALModelsQuery {
  all: [FALModelType]
}

"Root mutation\n    "
type Mutation {
  auth: AuthMutation
  documents: DocumentsMutation
  fals: FALsMutation
}

type AuthMutation {
  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type DocumentsMutation {
  certificates: CertificatesMutation
}

type CertificatesMutation {
  createCertificate(input: CreateCertificateInput!): CreateCertificateMutation
}

type CreateCertificateMutation {
  certificate: CertificateType
}

input CreateCertificateInput {
  """"""
  date: Date!
  attachment: Upload

  """"""
  no: String!

  """"""
  operationBasis: String!

  """"""
  unitName: String!

  """"""
  serviceUnitName: String!
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type FALsMutation {
  categories: FALCategoriesMutation
  falTypes: FALTypesMutation
  fals: FALModelsMutation
}

type FALCategoriesMutation {
  createCategory(input: CreateFALCategoryInput!): CreateFALCategoryMutation
}

type CreateFALCategoryMutation {
  falCategory: FALCategoryType
}

input CreateFALCategoryInput {
  """"""
  name: FalsFALCategoryNameChoices

  """"""
  faltypeSet: [ID]
}

type FALTypesMutation {
  createFalType(input: CreateFALTypeInput!): CreateFALTypeMutation
}

type CreateFALTypeMutation {
  falType: FALTypeType
}

input CreateFALTypeInput {
  """"""
  name: String!

  """"""
  category: ID!

  """"""
  falSet: [ID]
}

type FALModelsMutation {
  createFal(input: CreateFALInput!): CreateFALModelMutation
}

type CreateFALModelMutation {
  fal: FALModelType
}

input CreateFALInput {
  """"""
  falType: ID!

  """"""
  amount: Float!

  """"""
  density: Float

  """"""
  volume: Float

  """"""
  contentType: ID!

  """"""
  documentId: Int!
}