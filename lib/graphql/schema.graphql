"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AuthMutation {
  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

type CertificatesMutation {
  createCertificate(input: CreateCertificateInput!): CreateCertificateMutation
}

type CertificatesQuery {
  all: [CertificateType]
}

type CertificateType {
  id: ID!
  date: Date!
  attachment: String
  slug: String!
  no: String!
  operationBasis: String!
  unitName: String!
  serviceUnitName: String!
}

input CreateCertificateInput {
  date: Date
  attachment: Upload
  slug: String
  no: String!
  operationBasis: String!
  unitName: String!
  serviceUnitName: String!
}

type CreateCertificateMutation {
  certificate: CertificateType
}

input CreateFALCategoryInput {
  name: FalsFALCategoryNameChoices
  faltypeSet: [ID]
}

type CreateFALCategoryMutation {
  falCategory: FALCategoryType
}

input CreateFALInput {
  falType: ID!
  amount: Float!
  density: Float
  volume: Float
  contentType: ID!
  documentId: Int!
}

type CreateFALModelMutation {
  fal: FALModelType
}

input CreateFALTypeInput {
  name: String!
  category: ID!
  falSet: [ID]
}

type CreateFALTypeMutation {
  falType: FALTypeType
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type DocumentsMutation {
  certificates: CertificatesMutation
}

type DocumentsQuery {
  certificates: CertificatesQuery
  types: [DocumentType]
  all(documentType: String): [GeneralDocumentType]
}

type DocumentType {
  verboseName: String
  documentName: String
}

type FALCategoriesMutation {
  createCategory(input: CreateFALCategoryInput!): CreateFALCategoryMutation
}

type FALCategoriesQuery {
  all: [FALCategoryType]
}

type FALCategoryType {
  id: ID!
  name: FalsFALCategoryNameChoices!
  faltypeSet: [FALTypeType!]!
}

type FALModelsMutation {
  createFal(input: CreateFALInput!): CreateFALModelMutation
}

type FALModelsQuery {
  all: [FALModelType]
}

type FALModelType {
  id: ID!
  falType: FALTypeType!
  amount: Float!
  density: Float
  volume: Float
  documentId: Int!
}

"""An enumeration."""
enum FalsFALCategoryNameChoices {
  """Дизель"""
  DIESEL

  """Бензин"""
  PETROL

  """Мастило"""
  OIL
}

type FALsMutation {
  categories: FALCategoriesMutation
  falTypes: FALTypesMutation
  fals: FALModelsMutation
}

type FALsQuery {
  categories: FALCategoriesQuery
  types: FALTypesQuery
  fals: FALModelsQuery
}

type FALTypesMutation {
  createFalType(input: CreateFALTypeInput!): CreateFALTypeMutation
}

type FALTypesQuery {
  all: [FALTypeType]
}

type FALTypeType {
  id: ID!
  name: String!
  category: FALCategoryType!
  falSet: [FALModelType!]!
}

type GeneralDocumentType {
  documentType: DocumentType
  id: BigInt
  no: String
  date: Date
  attachment: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Root mutation
    
"""
type Mutation {
  auth: AuthMutation
  documents: DocumentsMutation
  fals: FALsMutation
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
Root query
    
"""
type Query {
  documents: DocumentsQuery
  fals: FALsQuery
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type Verify {
  payload: GenericScalar!
}

